name: PyBaMM

on:
  workflow_dispatch:
  pull_request:

jobs:
  pre_job:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          # All of these options are optional, so you can remove them if you are happy with the defaults
          concurrent_skipping: "never"
          cancel_others: "true"
          paths_ignore: '["**/README.md"]'

  style:
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Check style
        run: |
          python -m pip install pre-commit
          pre-commit run ruff

  build:
    needs: style
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Install and cache apt packages
      - name: Install Linux system dependencies
        uses: awalsh128/cache-apt-pkgs-action@v1.3.0
        if: matrix.os == 'ubuntu-latest'
        with:
          packages: gfortran gcc graphviz pandoc
          execute_install_scripts: true

      # dot -c is for registering graphviz fonts and plugins
      - name: Install OpenBLAS and TeXLive for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo dot -c
          sudo apt-get install libopenblas-dev texlive-latex-extra dvipng

      # Added fixes to homebrew installs:
      # rm -f /usr/local/bin/2to3
      # (see https://github.com/actions/virtual-environments/issues/2322)
      - name: Install macOS system dependencies
        if: matrix.os == 'macos-latest'
        env:
          # Homebrew environment variables
          HOMEBREW_NO_INSTALL_CLEANUP: 1
          HOMEBREW_NO_ANALYTICS: 1
          HOMEBREW_NO_GOOGLE_ANALYTICS: 1
          HOMEBREW_NO_AUTO_UPDATE: 1
          # Speed up CI
          NONINTERACTIVE: 1
        run: |
          rm -f /usr/local/bin/2to3*
          rm -f /usr/local/bin/idle3*
          rm -f /usr/local/bin/pydoc3*
          rm -f /usr/local/bin/python3*
          brew update
          brew install graphviz openblas

      - name: Install Windows system dependencies
        if: matrix.os == 'windows-latest'
        run: choco install graphviz --version=8.0.5

      - name: Install standard Python dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install nox

      - name: Cache pybamm-requires nox environment for GNU/Linux
        uses: actions/cache@v3
        if: matrix.os == 'ubuntu-latest'
        with:
          path: |
            # Repository files
            ${{ github.workspace }}/.nox/pybamm-requires/
            ${{ github.workspace }}/pybind11/
            ${{ github.workspace }}/install_KLU_Sundials/
            # Headers and dynamic library files for SuiteSparse and SUNDIALS
            ${{ env.HOME }}/.local/lib/
            ${{ env.HOME }}/.local/include/
            ${{ env.HOME }}/.local/examples/
          key: nox-pybamm-requires-${{ matrix.python-version }}-${{ hashFiles('**/noxfile.py', '**/install_KLU_Sundials.py') }}

      - name: Install SuiteSparse and SUNDIALS on GNU/Linux
        if: matrix.os == 'ubuntu-latest'
        run: nox -s pybamm-requires

      - name: Cache unit tests nox environment for GNU/Linux with Python 3.8, 3.9, and 3.10, and for macOS and Windows with all Python versions
        uses: actions/cache@v3
        if: (matrix.os == 'ubuntu-latest' && matrix.python-version != 3.11) || (matrix.os != 'ubuntu-latest')
        with:
          path: ${{ github.workspace }}/.nox/unit/
          key: ${{ runner.os }}-nox-unit-${{ matrix.python-version }}-${{ hashFiles('**/noxfile.py', '**/setup.py') }}

      - name: Run unit tests for GNU/Linux with Python 3.8, 3.9, and 3.10 and for macOS and Windows with all Python versions
        if: (matrix.os == 'ubuntu-latest' && matrix.python-version != 3.11) || (matrix.os != 'ubuntu-latest')
        run: nox -s unit

      - name: Cache coverage nox environment for GNU/Linux with Python 3.11
        uses: actions/cache@v3
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == 3.11
        with:
          path: ${{ github.workspace }}/.nox/coverage/
          key: ${{ runner.os }}-nox-coverage-${{ matrix.python-version }}-${{ hashFiles('**/noxfile.py', '**/setup.py', '**/.coveragerc') }}

      - name: Run unit tests for GNU/Linux with Python 3.11 and generate coverage report
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == 3.11
        run: nox -s coverage

      - name: Upload coverage report
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == 3.11
        uses: codecov/codecov-action@v2.1.0

      - name: Cache integration tests nox environment for GNU/Linux with Python 3.11
        uses: actions/cache@v3
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == 3.11
        with:
          path: ${{ github.workspace }}/.nox/integration/
          key: ${{ runner.os }}-nox-integration-${{ matrix.python-version }}-${{ hashFiles('**/noxfile.py', '**/setup.py') }}

      - name: Run integration tests for GNU/Linux with Python 3.11
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == 3.11
        run: nox -s integration

      - name: Cache doctests nox environment for GNU/Linux with Python 3.11
        uses: actions/cache@v3
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == 3.11
        with:
          path: ${{ github.workspace }}/.nox/doctests/
          key: ${{ runner.os }}-nox-doctests-${{ matrix.python-version }}-${{ hashFiles('**/noxfile.py', '**/setup.py', '**/docs/requirements.txt') }}

      - name: Install docs dependencies and run doctests for GNU/Linux with Python 3.11
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == 3.11
        run: nox -s doctests

      - name: Cache examples nox environment for GNU/Linux with Python 3.11
        uses: actions/cache@v3
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == 3.11
        with:
          path: ${{ github.workspace }}/.nox/examples/
          key: ${{ runner.os }}-nox-examples-${{ matrix.python-version }}-${{ hashFiles('**/noxfile.py', '**/setup.py') }}

      - name: Install dev dependencies and run example tests for GNU/Linux with Python 3.11
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == 3.11
        run: nox -s examples
